Use Falco to detect threats:
Now that we have installed Falco in our cluster, let us use it to detect and alert suspecious behavior. 


Next lets create a nginx pod:
kubectl run nginx --image nginx 
we can see its running on node01
On a separate terminal ssh to node01 and check falco logs: sudo journalctl _COMM=falco -p warning
This will allow us to inspect the events generated by falco service.

Lets now open a shell on the nginx container by: kubectl exec -it nginx -- bash
Immidiately an alert should be visible on journal logs that says a shell was spawned inside nginx container. 
It will also provide us with other outputs eg container id, image used by nginx , namespace etc.

Next lets read the content of /etc/shadow file inside the container on terminal 1: cat /etc/shadow
Another warning will be generated saying that a sensitive file was opened inside a container

So how does falco know about which events should be considered as anomolous and send us alert, for this Falco uses
rules. 
Falco implements several rules by default. one of which alerted us that a shell was opened inside a container and another one that warned us that sensitive files read inside the container.

- rule: Detect shell inside a container
  desc: Alert if a shell such as bash is open inside the container
  condition: container.id != host and proc.name = bash
  output: Bash opened (user=%user.name container=%container.id)
  priority: WARNING
The container.id and proc.name are known as Sysdig filters and they are extensively used by Falco. The Falco Policy engine makes use of these filters to extract information about an event such as the container ID, process name and several other.
Container.id filters the name of the container.
Proc.name–the name of the process.
In this file we have used the value as WARNING but depending on the severity we can change them to any of –debug, informational, notice, warning,error, Critical alert,or emergency.

Falco Configuation file: In this section, we will take a look at Falco Configuration Files.
The main falco configuration file is a YAML file which is located at /etc/falco/falco.yaml. And it is this configuration file that falco uses when it starts up.
This YAML file consists of all the configuration options used by Falco - such as the location of the rules that it uses, various formatting options used for log and output messages, the output channels to be configured e.t.c
The built-in rules that we saw in action in the previous lecture are stored inside the /etc/falco/falco_rules.yaml file and you can see that it is first in this list

Some of /etc/falco/falco.yaml options:
The JSON Output field, when enabled, logs the events in JSON. By default this field is set to false and logs events as text.
Then we have configuration options related to Falco itself. Such as logging options for the falco process such as whether to log to standard error or to syslog and the log level to be used for falcos logs. These are not to be confused with the PRIORITY that we used for individual rules.
The log level is specific for the logs generated for falco itself.
The priority field however, is related to Falco rules. This is the minimum priority level that Falco will use to log events. So anything with a higher priority will be logged and anything under the set priority will not be logged by falco.
program_output If enabled is set to true, Falco alerts will be sent to a program

Now lets look at the rules file: /etc/falco/falco_rules.yaml
The /etc/falco/falco_rules.yaml is the default file that contains all the built in rules.
The events that were generated when we opened shell into the container and opened the shadow file were generated based on the rules in this file.
We can also write our own rules or overwrite an existing default rule. While technically an existing falco rule can be updated directly inside the default falco rules file and expected to work but this is not the recommended approach.
Any changes made in the falco_rule.yaml file will be overwritten when the falco package is updated.
The custom rules should be added to the falco_rules.local.yaml file.



