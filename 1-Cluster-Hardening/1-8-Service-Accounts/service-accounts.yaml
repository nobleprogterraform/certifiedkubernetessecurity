
kubectl exec -it nginx -- cat /var/run/secrets/kubernetes.io/serviceaccount/token
kubectl create sa jenkins-sa
kubectl create token jenkins-sa

- So there are two types of accounts in Kubernetes: a user account and a service account. The user account is used by humans,
		and service accounts are used by machines. 
		A service account could be an account used by an application to interact with a Kubernetes cluster. For example, a monitoring application
		like Prometheus uses a service account to pull the Kubernetes API for performance metrics. An automated build tool like Jenkins
		uses service accounts to deploy applications on the Kubernetes cluster.
	- To create a service account run: kubectl create serviceaccount jenkins-sa
	- To view all service accounts: kubectl get serviceaccounts
	- Until version 1.21, When the service account is created, it also creates a token (wrapped inside a secret object) automatically. 
		The service account token is what must be used by the external application while authenticating to the Kubernetes API.
		You can view secret name by kubectl describe serviceaccount jenkins-sa which has field called token.
		To view the actual token inside secret run: kubectl describe secret jenkins-sa-token-s33db
		This token can then be used as an authentication bearer token while making a REST call to the Kubernetes API
		eg. curl https://kube-cluster:6443/api -insecure --header "Authorization: Bearer eydfkdhfkdhdkhfkdhfkdh"
	- You can create a service account, assign the right permissions using role-based access control mechanisms, which we did 
		in previous lecture just put kind: ServiceAccount, and export your service account tokens and use it to configure your
		third-party application to authenticate to the Kubernetes API
	- if your third-party application like jenkins is hosted on the Kubernetes cluster itself. 
		In that case, this whole processof exporting the service account token and configuring the third-party application to use it
		can be made simple by automatically mounting the service token secret as a volume inside the pod hosting the third-party application.
		That way, the token to access the Kubernetes API is already placed inside the pod and can be easily read by the application.
	- For every name space in Kubernetes, a service account named default is automatically created. Each namespace has its own default service account.
		Whenever a pod is created, the default service account and its token are automatically mounted to that pod as a volume mount.
		The secret token is mounted at location /var/run/secret/kubernetes.io/serviceaccount inside the pod, you can view by running below command
		kubectl exec -it pod-name cat /var/run/secret/kubernetes.io/serviceacccount/token
		you can disable default token mount on the pod by using field automountServiceAccountToken: false
	- Updates made in version 1.22: if you decode the above token by pasting this token in the JWT website at jwt.io, you'll see that it has no expiry 
		date defined.  in version 1.22, the TokenRequestAPI was introduced, that aimed to introduce a mechanism for provisioning Kubernetes service 
		account tokens that are more secure and scalable via an API. They're time bound and object bound, and hence are more secure.
	- After v1.22 a token with a defined lifetime is generated through the TokenRequestAPI by the service account admission controller when 
		the pod is created. And this token is then mounted as a projected volume into the pod
		spec:
		  volumes:
		  - name: kube-api-access-6mtee
		    project: 
			  defaultMode: 420
			  sources:
			  - serviceAccountToken:
			      expirationInSeconds: 3607
				  path: token
	- In version v1.24, another enhancement was made which dealt with the reduction of secret-based service account tokens.
		 when you create a service account, it no longer automatically creates a secret or a token access secret.
		 So you must run the command kubectl create token followed by the name of the service account to generate a token for that service account,
		 if you need one. Default expiry date is 1 hour from creation, you can provide expiry time in command argument
	- The TokenRequest API is recommended instead of using the service account token secret objects as they are more secure and have 
		a bounded lifetime