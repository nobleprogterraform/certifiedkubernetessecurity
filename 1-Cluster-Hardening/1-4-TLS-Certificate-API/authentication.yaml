apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: sahdev
spec:
  signerName: kubernetes.io/kube-apisever-client
  groups:
  - system:authenticated
  usages:
  - digital signature
  - key encipherment
  - client auth
  request:
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZqQ0NBVDRDQVFBd0VURVBNQTBHQTFVRUF3d0djMkZvWkdWMk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRgpBQU9DQVE4QU1JSUJDZ0tDQVFFQTUvQ0xFYTJBRnF2RjczVnJ3WVd2UmpGSkN2RkM0RDB0VjZnMzF3N1ZXNnhxCnRCN2lrbFNvQ1g4bEIra0NuQ3dtdTlhZXUySWdNSjBwc3NGaisvbDY1bi9kaDhneEtLd1RiNThMQVJLcVZOd3IKZDJXVEhxcjA0NVdHT0ltZlZLWHl3K2pZNFBaL2JydVdOS3NVSXBEQmNuTENwQTRYekFjUSsxSld2Z1BWaTVXSgpHeFYzUEVkMHlMbzFVRkFzYlZtZUZPWGdyNFdIaU5LV2xrRkRrN2pxSUh3T0ZwZ05vdHlBbzA5Mk9lV3Z6RzJLCnNjRGZETWhOL2ROR25oVGd3WVhRQkllWDVUUTBHM2t0dmRaNHo3RnJnNmVLZTZ1N1FEZVlhQXg0ZDRlYWVPWFAKZlBCOVZRSC9kYU5obVdHMVdWK0RLVG5UdnhlaEVyaHRRb2VUTjl2N0NRSURBUUFCb0FBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQzExREZEL3FocjQ3VVJPNmRUR1pPcHNSQUh0cnNob0lKTGFsVDViOEFSaDRubThWTkVEClY0ODFQWHVicWhuUVNIaHRPV3BGK0M0WTlGQjJsa1hycGFHTWJ1Vks0NWpqYTN4dzc1aGl3UXBXSUVLZ2Q4UFQKMy9uOGxCNE9Tc09MM0RuTWZlMXV3QWZvK3c2K0xXY0pDNnUyb3cwQ3piWWtzNXJyenVGRU04Nmo1YVhuZkp4ZQoxQUJxRzl2dHhQeklDRjM2bG1PZ2g2cHU0WXB5ZlYzSVNUblNTQWNHWm8wN2szZ0xFOWE3eDVMNEYrcG9mVmtoCmFmVGEvRnM1OGFnWHhMbXNlL0tickJFQ3hERE9keFhlWk9xVFRhN1pxb3F1UjFuc1pCVFhIQm9XeU9pT051S3gKT29GUzE0aFJ6UzBzbEE3bXlQZ0lMNHdXb2kyK0xNeGxGQXc9Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=

  sudo openssl genrsa -out sahdev.key 2048
  sudo openssl req -new -key sahdev.key -subj "/CN=sahdev" -out sahdev.csr
  cat sahdev.csr | base64 | tr -d "\n"
  kubectl get csr
  kubectl certificate approve sahdev
  kubectl get csr sahdev -o

		
		Certificate API:
		What is the CA server and where is it located in the Kubernetes setup?
		The CA is really just a pair of key and certificate files we have generated. Whoever gains access to these pair of files
		can sign any certificate for the Kubernetes environment.They can create as many users as they want with whatever privileges they want.
		So these files need to be protected and stored in a safe environment. Say we place them on a server that is fully secure.
		Now that server becomes your CA server.
		The certificate key file is safely stored in that server and only on that server. Every time you want to sign a certificate,
		you can only do it by logging into that server. As of now, we have the certificates placed on the Kubernetes master node itself.
		So the master node is also our CA server.
	- The Kubeadm tool does the same thing. It creates a CA pair of files and stores that on the master node itself.
		So far, we have been signing requests manually, but as and when the users increase and your team grows,
		you need a better automated way to manage the certificate signing requests, as well as to rotate certificates when they expire
	- Kubernetes has a built-in certificates API that can do this for you. With the certificates API,you now send a certificate signing request
		directly to Kubernetes through an API call
	- When the administrator receives a certificate signing request. instead of logging onto the master node
		and signing the certificate by himself, he creates a Kubernetes API object called CertificateSigningRequest
		
	-The administrator takes the key and creates a CertificateSigningRequest object. The CertificateSigningRequest object
		is created like any other Kubernetes object, under spec and request field is where you specify
		the certificate signing request sent by the user in base64 encoded form (cat jane.csr | base64)
	- Once the object is created, all certificate signing requests can be seen by administrators by running the kubectl get csr
		and approve by kubectl certificate approve jane
		kubectl get csr jane -o yaml (output is base64 encoded certificate)
	- Which of the kubernetes controlplane components is actually responsible for all the certificate-related operations?
		All the certificate-related operations are carried out by the controller manager.
	- kubectl deny csr agent-smith
	- kubectl delete csr agent-smith
