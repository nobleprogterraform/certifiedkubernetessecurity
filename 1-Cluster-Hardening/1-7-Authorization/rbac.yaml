apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: developer
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["ConfigMap"]
  verbs: ["create"]


      ---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: devuser-developer-binding
subjects:
- kind: User
  name: dev-user
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: developer
  apiGroup: rbac.authorization.k8s.io



RBAC:
	
	Role Based Access Control (RBAC)
- Creating a role using definition file
	
- The next step is to link the users to that role. For this, we create another object called role binding
		
- Also note that the roles and role bindings fall under the scope of name spaces. So here the dev user gets access
	to pods and configmaps within the default name space. If you want to limit the dev user's access
	within a different name space then specify the name space within the metadata of the definition file while creating them.
- commands: kubectl get roles
			kubectl describe role developer
			kubectl edit role developer -n=blue
			kubectl get rolebindings
			kubectl describe rolebinding devuser-developer-binding
			kubectl auth can-i create deployments
			kubectl auth can-i delete pods --as dev-user-1
			kubectl auth can-i create nodes --as dev-user-1 --namespace test
