- In this lecture let's take a look at how to improve isolation in containers using sandboxing techniques
- before we understand what sandboxing means in relation to containers let us have a quick look at how virtual machines work Every virtual machine is deployed on top of a physical infrastructure a physical server with sufficient RAM storage and several CPU course available at its disposal.  
We then have an operating system installed on top of this hardware, next we have the hypervisor for example a type 2 such as an oracle virtualbox or some other virtualization software installed on the operating system and finally we are about several virtual machines on top allocating the RAM and CPU goes to them as needed. 
And should we Desire each virtual machine can run different operating systems of Their Own.
- The point to take away here is that every virtual machine has its own operating system and more importantly the dedicated kernel of its own. The same as applicable for virtual machines on the cloud every VM that we create on the cloud whether it's AWS or gcp or any other cloud provider meet use of dedicated kernel of its own.  This allows for a strong isolation between virtual machines that run on the same physical infrastructure because of the strong isolation that virtual machines offer it can be used to securely host several different environments belonging to several different customers.  
Such a set up is often called as multi-tenent environment.
- Comparing a virtual machine to a container, one of the key differences is that all containers on a server whether it's running on a virtual machine or a physical server share the same underlying kernel and from the perspective of a host is just another process which is isolated from the host and other containers running on it. 
- But how good is this isolation for example let us run a BusyBox container that sleeps for 1000 seconds and of course this container will run the sleep command as a root user within the container that has the pid of 1 now if you run a PS command on the Host where we ran the container we can see the same process running on the Host but the different pid. 
The process has one pid inside the container and another one outside on the Host . This is called process ID namespace and that's how containers isolate process from each other like this.  
- From the Host you will be able to see all processes running on all containers if you kill this process on the Host it will also wipe out the container. Applications, whether deploy directly on the host or as a container run in the user space and will make use of these servers hardware resources. 
- They have to make system calls and so every container in the whole make syscalls to the same kernel to work properly. exploits such as the dirty cow can be used to break out of the container and into the Host running a vulnerable code with such an exploit a compromise container can create a back door entry onto the host and therefore compromise all the other containers running on it 
- This is undoubtedly a huge security breach as private information stored on the Host can now be used by the attacker and well this is where sandboxing comes into the picture.
- sandbox can have several different meanings in computing but in the context of security sandboxing refers to as any technique that isolate something from the rest of the system. 
- we have already seen some of these techniques in Action earlier, we learned how docker users are default seccomp profile to make sure that containers cannot make potentially dangerous system calls.
- we also saw how seccomp can be used in kubernetes and restrict containers to the Bare minimum privileges needed for the application to run. 
- we also saw how to make use of app-armor profiles to achieve fine grain control over which resources container can access. - Both of these techniques more or less work on the same principle, whitelist be things are container is allowed to do and blacklist things which are not allowed

-it makes sense to use tools such as app-armor seccomp or any other tools when we don't run a lot of different apps in our containers for example even though we may have thousand containers if they all run nginx or equal we only have to define two rules sets which does not require that much work but what if you run 500 different applications it would then be very tedious to write profiles for all of them and then to test out the rules and Force in hundreds of different scenarios and to make sure everything still works correctly.
Even with the help of third party tools, writing efficient profiles is not an easy task. Wwe have to keep one thing in mind nothing is perfect every security measure has advantages and disadvantages the price to pay 
so to speak so there is no one best way that is good at everything we have to pick and choose which works best for us and for our specific scenario