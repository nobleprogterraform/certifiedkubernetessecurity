- We will have brief discussion on How we can make use of mtls to secure inter pod communication.
  when one pod needs information from another pod using different services, it requests through the network connecting them to servers however by default data transmitted between these pods is unencrypted and this opens up the same problems as before an attacker sniffing on the network can see what the message is as it is sent in a plain text format 
  this may potentially be the information that should probably remain private
- we can also set up mutual TLS between our pods. When a pod A wants to send data to pod B, it will first request for pod B certificate, pod B will then reply back with its own certificate but will also ask for A's own certificate. After validating certificate pod A will be able send its own public certificate along with the symmetric key. Pod B will then validate pod A certificate and check if its valid. All future communication will now be encrypted using the symmetric key. 
- In Mutual authentication both pods prove to each other that they are indeed the real pods.
- So how is all this achieved within our cluster. Who manages the certificates and the keys and how is its managed when there are hundreds of pods across several nodes, each of which tries to transfer data with several other pods.
- one way to do this is to have the applications running on the pods encrypt the messages themselves, however it is not very convenient to use this universally. so instead the better approach is to let applications communicate normally using unencrypted format and use other ways to add encryption on top. So instead of relying on applications to encrypty data we can leverage third-party programs like Istio and Linkerd are two such third party programs that facilitate mtls encryption between pods
- Let us take attention back to the web app container running inside a pod. One node that needs to talk to the MySQL container running inside another pod on another node. When we implement mtls with Istio, it installs a sidecar container into the web app pod as well as the MySQL pod. Now when our web pod sends a message, that has to be sent to the mysql pod the istio sidecar intercepts the message before it leaves the network it then encrypts the message and then send it to the network. Once the encrypted data reaches the other server it is decrypted by the istio sidecar container running inside the MySQL pod. the decrypted data is then passed on to be my SQL container
- By default, the sidecar will be configured to accept both mTLS and non-mTLS traffic, known as PERMISSIVE mode. The mode can alternatively be configured to STRICT, where traffic must be mTLS, or DISABLE, where traffic must be plain text.