
- In this section, we will take a look at Admission Controllers:
When a request comes in , say to create a pod, it goes through authentication, authorization and then through admission controllers before being created.
Kubernetes admission controllers are plugins that govern and enforce how the cluster is used.
For eg. you may want to look at the pod defintion file and you do not want to allow images from a public docker hub registry only allow images from a specific internal registry. 
So these are some of the things that you can't achieve with the existing role-based access control and that is where admission controllers comes in. 
Controllers help us implement better security measures to enforce how a cluster is used apart from simply validating configuration admission controllers can do a lot more such as change the request itself or perform additional operations before the part gets created 

- With Admission Controllers, you can:
Only permit images from a certain registry.
Don't permit runAs root user.
Only permit certain capabilities.
Pods always have labels.

- To see which admission plugins are enabled:
kubectl exec kube-apiserver-controlplane -n kube-system -- kube-apiserver -h | grep enable-admission-plugins

- Add an admission controller NamespaceAutoProvision:
$ kubectl run nginx --image nginx -n blue
  vim /etc/kubernetes/manifests/kube-apiserver.yaml
  update --enable-admission-plugins=NodeRestriction
  with --enable-admission-plugins=NodeRestriction,NamespaceAutoProvision
Now run again: $ kubectl run nginx --image nginx -n blue


- Disable DefaultStorageClass admission controller:
  Update /etc/kubernetes/manifests/kube-apiserver.yaml as below
- --disable-admission-plugins=DefaultStorageClass

